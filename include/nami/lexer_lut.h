/** 
 * Generated nami lexer
 * 
 * @file nami/lexer_lut.h
**/

// Header guard
#pragma once

// Data
const char *_p_keywords[74] = {(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"bool",(const char *) 0,"str",(const char *) 0,(const char *) 0,(const char *) 0,"switch","object",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"type","int",(const char *) 0,(const char *) 0,(const char *) 0,"array",(const char *) 0,"case",(const char *) 0,(const char *) 0,(const char *) 0,"default","enum","else",(const char *) 0,(const char *) 0,(const char *) 0,"struct","for","number","interface",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"break",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"if",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"continue",(const char *) 0,(const char *) 0};
const char *_p_operators[145] = {(const char *) 0,";",">>=",(const char *) 0,(const char *) 0,"<=",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"&=",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,">=",(const char *) 0,"%=","/","^=",(const char *) 0,"--",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"&&",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"-=","<<","(","==",(const char *) 0,(const char *) 0,(const char *) 0,"|=",(const char *) 0,(const char *) 0,"!=",(const char *) 0,"*=",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"/=",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"!",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"=",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,")",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"+=",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"&",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,">>","++",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"<<=","~",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"-","%","<>","^",(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,(const char *) 0,"||",(const char *) 0,(const char *) 0,"*",(const char *) 0,"+",(const char *) 0,(const char *) 0,">",(const char *) 0,"<"};
