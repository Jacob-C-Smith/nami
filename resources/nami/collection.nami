interface Collection : Comparable, Iterator
{
    add ( element )
    clear ( )
    contains ( element, p_result : bool * )
    empty ( p_result : bool * )
    remove ( element )
    size ( p_result : int * )
}

type collection : Collection
{

    struct
    {
        c : array = [ ]
        m : int
        s : int
    }

    collection ( p_collection : collection *, size : int )
    {
        m = size
        s = 0
        c = [ ]
    }

    size ( p_result : int * )
    {
        *p_result = s
    }

    empty ( p_result : bool * )
    {
        *p_result = (s == 0)
    }

    contains ( element, p_result : bool * )
    {

        result : bool = false

        for ( i : int = 0; i < s; i++ )
        {

            e : int 
            compare(c[i], element, &e)
            if ( e == 0 ) 
            {
                result = true
                break
            }
        }

        *p_result = result
    }

    add ( element )
    {
        c[s] = element
        s++
    }
}
