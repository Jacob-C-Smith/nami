/** !
 * Nami collection
 *
 * @file nami/collection.nami
 *
 * @author Jacob Smith
 */

interface List : Collection
{

    // Inherited functions

    // Base
    //  - wait       ( )
    //  - notify     ( )
    //  - notify_all ( )

    // Comparable
    //  - compare    ( a, b, p_result : int *)

    // Iterator
    //  - foreach    ( element, action : func )

    // Collection
    //  - add        ( element )
    //  - clear      ( )
    //  - contains   ( element, p_result : bool * )
    //  - empty      ( p_result : bool * )
    //  - remove     ( element )
    //  - size       ( p_result : int * )

    /** !
     * Index the array
     * 
     * @param i        the index
     * @param p_result the result
     */
    index ( i : int, p_result : * )
}

type list : List
{

    // Data
    struct
    {
        c : array = [ ]
        m : int
        s : int
    }

    // Constructor
    list ( size : int )
    {

        // Store the max size
        m = size

        // Store the initial size
        s = 0

        // Construct the array
        c = [ ]

        // Done
    }

    // Accessors
    size ( p_result : int * )
    {

        // Store the result
        *p_result = s

        // Done
    }

    empty ( p_result : bool * )
    {

        // Store the result
        *p_result = (s == 0)

        // Done
    }

    contains ( element, p_result : bool * )
    {

        // Initialized data
        result : bool = false

        // Search the collection
        for ( i : int = 0; i < s; i++ )
        {

            // Initialized data
            e : int 

            // Compare c[i] to element 
            compare(c[i], element, &e)

            // If this element is the element ...
            if ( e == 0 ) 
            {

                // ... set the result flag ...
                result = true

                // ... and stop searching ...
                break
            }
        }

        // Store the result
        *p_result = result

        // Done
    }

    // Mutators
    add ( element )
    {

        // Add the element to the rear of the collection
        c[s] = element

        // Increment the size of the collection
        s++

        // Done
    }
}

